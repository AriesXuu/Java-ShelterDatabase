/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shelterdatabase;

import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author new user
 */
public class ResidentEntry extends javax.swing.JFrame {

    /**
     * Creates new form ResidentEntry
     */
    public ResidentEntry() {
        initComponents();
        getConnection();
        Show_Resident_In_JTable();
    }
    String ImgPath = null;
    int pos = 0; 



    public Connection getConnection()
    {
        Connection con = null;
        
        try{
            con = DriverManager.getConnection("jdbc:mysql://localhost/shelterdb","root","xuyeqii");
            //JOptionPane.showMessageDialog(null, "connected");
            return con;
        } catch (SQLException ex) {
            Logger.getLogger(ResidentEntry.class.getName()).log(Level.SEVERE, null, ex);
            //JOptionPane.showMessageDialog(null, "not connected");
            return null;
        }
    }

    
      public ImageIcon ResizeImage(String imagePath, byte[] pic)
    {
        ImageIcon myImage = null;
        
        if(imagePath != null)
        {
            myImage = new ImageIcon(imagePath);
        
        }else{
            myImage = new ImageIcon(pic);
        }
        
            Image img = myImage.getImage();
            Image img2 = img.getScaledInstance(lbl_image.getWidth(), lbl_image.getHeight(),Image.SCALE_SMOOTH);
            ImageIcon image = new ImageIcon(img2);
            return image;
    }
    
    
    
    public boolean checkInputs()
    {
        if( text_fname.getText() == null
                || text_sname.getText() == null
                || text_dob.getText() == null
                || text_gender.getText() == null
                || text_language.getText() == null
                || text_nationality.getText() == null
                || text_religion.getText() == null
                ){
            return false;
        }else{
            try{
               return true;
            }catch(Exception ex)
            {
                return false;
            }
        }
        
    }
        
    public ArrayList<Resident> getResidentList()
        {
            ArrayList<Resident> ResidentList = new ArrayList<Resident>();
            Connection con = getConnection();
            String query = "SELECT * From Resident";
            
            Statement st;
            ResultSet rs;            
        try {  
            st = con.createStatement();
            rs = st.executeQuery(query);
            Resident resident;
            
            while(rs.next())
            {
                resident = new Resident(rs.getInt("ResidentID"),rs.getString("Fname"),rs.getString("Sname"),rs.getString("DOB"),rs.getString("Gender"),rs.getString("Language"),rs.getString("Nationality"),rs.getString("Religion"),rs.getBytes("Image"));
                ResidentList.add(resident);
                
            }
        } catch (SQLException ex) {
            Logger.getLogger(ResidentEntry.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ResidentList;
        }
        
        public void Show_Resident_In_JTable()
        {
            ArrayList<Resident> list = getResidentList();
            DefaultTableModel model = (DefaultTableModel)JTable_Residents.getModel();
            
            Object[] row = new Object[8];
            for(int i = 0; i < list.size(); i++)
            {
                row[0] = list.get(i).getresidentid();
                row[1] = list.get(i).getfname();
                row[2] = list.get(i).getsname();
                row[3] = list.get(i).getdob();
                row[4] = list.get(i).getgender();
                row[5] = list.get(i).getlanguage();
                row[6] = list.get(i).getnationality();
                row[7] = list.get(i).getreligion();
                
                model.addRow(row);  
            }
        }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        text_residentid = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        text_fname = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        text_sname = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        text_dob = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        text_gender = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        text_language = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        text_nationality = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        text_religion = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTable_Residents = new javax.swing.JTable();
        insert = new javax.swing.JButton();
        search = new javax.swing.JButton();
        update = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        previous = new javax.swing.JButton();
        next = new javax.swing.JButton();
        chooseimage = new javax.swing.JButton();
        lbl_image = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        text_searchid = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        clear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("ResidentID");

        text_residentid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_residentidActionPerformed(evt);
            }
        });

        jLabel2.setText("First Name");

        text_fname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_fnameActionPerformed(evt);
            }
        });

        jLabel3.setText("Second Name");

        text_sname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_snameActionPerformed(evt);
            }
        });

        jLabel4.setText("Date Of Birth");

        text_dob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_dobActionPerformed(evt);
            }
        });

        jLabel5.setText("Gender");

        text_gender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_genderActionPerformed(evt);
            }
        });

        jLabel6.setText("Language");

        text_language.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_languageActionPerformed(evt);
            }
        });

        jLabel7.setText("Nationality");

        text_nationality.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_nationalityActionPerformed(evt);
            }
        });

        jLabel8.setText("Religion");

        text_religion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_religionActionPerformed(evt);
            }
        });

        JTable_Residents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ResidentID", "Fname", "Sname", "DOB", "Gender", "Language", "Nationality", "Religion"
            }
        ));
        JTable_Residents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JTable_ResidentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(JTable_Residents);

        insert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shelterdatabase/Images/Button-Add-icon.png"))); // NOI18N
        insert.setText("Insert");
        insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertActionPerformed(evt);
            }
        });

        search.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shelterdatabase/Images/Ok-icon.png"))); // NOI18N
        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shelterdatabase/Images/Sign-Alert-icon.png"))); // NOI18N
        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        Delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shelterdatabase/Images/Button-Close-icon.png"))); // NOI18N
        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        previous.setText("Previous");
        previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousActionPerformed(evt);
            }
        });

        next.setText("Next");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        chooseimage.setText("choose image");
        chooseimage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseimageActionPerformed(evt);
            }
        });

        lbl_image.setBackground(new java.awt.Color(255, 255, 255));
        lbl_image.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 153), 2));
        lbl_image.setOpaque(true);

        jLabel9.setText("Enter ResidentID");

        text_searchid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_searchidActionPerformed(evt);
            }
        });

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shelterdatabase/Images/information-systems-management.jpg"))); // NOI18N

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 705, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 614, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(insert, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(update)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(previous, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(next, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel9)
                            .addGap(18, 18, 18)
                            .addComponent(text_searchid, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel4))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(text_dob, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(text_sname, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(text_fname, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(text_residentid, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(77, 77, 77)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(text_language, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(text_gender, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(text_nationality, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(text_religion, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(clear))
                            .addGap(36, 36, 36)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(chooseimage, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(lbl_image, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel3, jLabel4});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel5, jLabel6, jLabel7, jLabel8});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Delete, insert, next, previous, update});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(text_searchid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(search))
                    .addComponent(jLabel9))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(chooseimage))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clear)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(text_residentid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(text_gender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(text_fname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(text_language, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(text_sname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel7)
                            .addComponent(text_nationality, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(text_dob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(text_religion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8))))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_image, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previous)
                    .addComponent(next)
                    .addComponent(insert)
                    .addComponent(update)
                    .addComponent(Delete))
                .addGap(20, 20, 20))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel3, jLabel4});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {text_dob, text_fname, text_residentid, text_sname});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel5, jLabel6, jLabel7, jLabel8});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {text_gender, text_language, text_nationality, text_religion});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Delete, insert, next, previous, update});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void text_residentidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_residentidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_text_residentidActionPerformed

    private void text_fnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_fnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_text_fnameActionPerformed

    private void text_snameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_snameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_text_snameActionPerformed

    private void text_dobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_dobActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_text_dobActionPerformed

    private void text_genderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_genderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_text_genderActionPerformed

    private void text_languageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_languageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_text_languageActionPerformed

    private void text_nationalityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_nationalityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_text_nationalityActionPerformed

    private void text_religionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_religionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_text_religionActionPerformed

    private void insertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertActionPerformed
    if(checkInputs())
    {
        try {
        Connection con = getConnection();
        PreparedStatement ps = con.prepareStatement("INSERT INTO Resident(Fname, Sname, DOB, Gender, Language, Nationality, Religion, Image)" + "VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
        
        ps.setString(1, text_fname.getText());
        ps.setString(2, text_sname.getText());
        ps.setString(3, text_dob.getText());
        ps.setString(4, text_gender.getText());
        ps.setString(5, text_language.getText());
        ps.setString(6, text_nationality.getText());
        ps.setString(7, text_religion.getText());
        InputStream img = new FileInputStream(new File(ImgPath));
        ps.setBlob(8, img);
        ps.executeUpdate();
        Show_Resident_In_JTable();
        
        JOptionPane.showMessageDialog(null, "Data Inserted");
        
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }else{
        JOptionPane.showMessageDialog(null, "One or More Fields are Empty");  
    }
   
    System.out.println("Fname => "+text_fname.getText());
    System.out.println("Sname => "+text_sname.getText());
    System.out.println("DOB => "+text_dob.getText());
    System.out.println("Gender => "+text_gender.getText());
    System.out.println("Language => "+text_language.getText());
    System.out.println("Nationality => "+text_nationality.getText());
    System.out.println("Religion => "+text_religion.getText());
    System.out.println("Image => "+ImgPath);

    }//GEN-LAST:event_insertActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        
        if(checkInputs() && text_residentid.getText() != null)
{
        String UpdateQuery = null;
        PreparedStatement ps = null;
        Connection con= getConnection();
    
        if(ImgPath == null)
        {    
        try {
        UpdateQuery = "UPDATE Resident SET Fname = ?, Sname = ?, DOB = ?, Gender = ?, Language = ?, Nationality = ?, Religion = ? WHERE ResidentID = ?" ;
        ps = con.prepareStatement(UpdateQuery);        
        ps.setString(1, text_fname.getText());
        ps.setString(2, text_sname.getText());
        ps.setString(3, text_dob.getText());
        ps.setString(4, text_gender.getText());
        ps.setString(5, text_language.getText());
        ps.setString(6, text_nationality.getText());
        ps.setString(7, text_religion.getText());
        ps.setInt(8, Integer.parseInt(text_residentid.getText()));
 
        
        ps.executeUpdate();
        Show_Resident_In_JTable();
        JOptionPane.showMessageDialog(null,"Updated"); 
        } catch (Exception ex) {        
        Logger.getLogger(ResidentEntry.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    
}else{
            try{
                InputStream img = new FileInputStream(new File(ImgPath));
                UpdateQuery = "UPDATE Resident SET Fname = ?, Sname = ?, DOB = ?, Gender = ?, Language = ?, Nationality = ?, Religion = ?, Image = ? WHERE ResidentID = ?";
                
                ps = con.prepareStatement(UpdateQuery);
                
                ps.setString(1, text_fname.getText());
                ps.setString(2, text_sname.getText());
                ps.setString(3, text_dob.getText());
                ps.setString(4, text_gender.getText());
                ps.setString(5, text_language.getText());
                ps.setString(6, text_nationality.getText());
                ps.setString(7, text_religion.getText());
                ps.setBlob(8, img);
                ps.setInt(9, Integer.parseInt(text_residentid.getText()));
                
                ps.executeUpdate();
                Show_Resident_In_JTable();
                JOptionPane.showMessageDialog(null,"Updated"); 
          
            } catch (Exception ex) {
               JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        }          
    }else{
            JOptionPane.showMessageDialog(null,"one or more fields are empty or wrong");
}
    }//GEN-LAST:event_updateActionPerformed

    //Search button below
    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
    try{
       ResultSet rs = Db.getDate("SELECT * FROM RESIDENT WHERE ResidentID='" + text_searchid.getText() + "'");
       if(rs.first())
       {
           text_residentid.setText(rs.getString("ResidentId"));
           text_fname.setText(rs.getString("Fname"));
           text_sname.setText(rs.getString("Sname"));
           text_dob.setText(rs.getString("DOB"));
           text_gender.setText(rs.getString("Gender"));
           text_language.setText(rs.getString("Language"));
           text_nationality.setText(rs.getString("Nationality"));
           text_religion.setText(rs.getString("Religion"));
       }
  }     catch (SQLException ex) {    
            Logger.getLogger(ResidentEntry.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(ResidentEntry.class.getName()).log(Level.SEVERE, null, ex);
        } 

    }//GEN-LAST:event_searchActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
  if(!text_residentid.getText().equals(""))
        {
            try {
                Connection con = getConnection();
                PreparedStatement ps = con.prepareStatement("DELETE FROM resident WHERE ResidentID = ?");
                int id = Integer.parseInt(text_residentid.getText());
                ps.setInt(1, id);
                ps.executeUpdate();
                Show_Resident_In_JTable();
                JOptionPane.showMessageDialog(null,"Information Deleted");
            } catch (SQLException ex) {
                Logger.getLogger(shelterdatabase.ResidentEntry.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null,"Information Deleted");
            }
        }else{
            JOptionPane.showMessageDialog(null,"Information Deleted: No Id To Delete");
        }
    }//GEN-LAST:event_DeleteActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
       pos++;
       
       if(pos >= getResidentList().size())
       {
           pos = getResidentList().size()-1;
       }
       ShowItem(pos); 
    }//GEN-LAST:event_nextActionPerformed

    private void previousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousActionPerformed
        pos--;
        
        if(pos < 0)
        {
            pos = 0;
        }
        ShowItem(pos); 
    }//GEN-LAST:event_previousActionPerformed

    private void JTable_ResidentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTable_ResidentsMouseClicked
    int index = JTable_Residents.getSelectedRow();
        ShowItem(index);        // TODO add your handling code here:
    }//GEN-LAST:event_JTable_ResidentsMouseClicked

    private void chooseimageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseimageActionPerformed
             JFileChooser file = new JFileChooser();
        file.setCurrentDirectory(new File(System.getProperty("user.home")));
        
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.images", "jpg","png");
        file.addChoosableFileFilter(filter);
        int result = file.showSaveDialog(null);
        if(result == JFileChooser.APPROVE_OPTION)
        {
            File SelectedFile = file.getSelectedFile();
            String path = SelectedFile.getAbsolutePath();
            lbl_image.setIcon(ResizeImage(path, null));
            ImgPath = path;
        }else{
            System.out.println("no file selected");
        }// TODO add your handling code here:
    }//GEN-LAST:event_chooseimageActionPerformed

    private void text_searchidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_searchidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_text_searchidActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
         text_residentid.setText("");
         text_fname.setText("");
         text_sname.setText("");
         text_dob.setText("");
         text_gender.setText("");
         text_language.setText("");
         text_nationality.setText("");
         text_religion.setText(""); 
         
    }//GEN-LAST:event_clearActionPerformed
    
    public void ShowItem(int index)
    {
         text_residentid.setText(Integer.toString(getResidentList().get(index).getresidentid()));  
         text_fname.setText(getResidentList().get(index).getfname());
         text_sname.setText(getResidentList().get(index).getsname());
         text_dob.setText(getResidentList().get(index).getdob());
         text_gender.setText(getResidentList().get(index).getgender());
         text_language.setText(getResidentList().get(index).getlanguage());
         text_nationality.setText(getResidentList().get(index).getnationality());
         text_religion.setText(getResidentList().get(index).getreligion());  
         
         lbl_image.setIcon(ResizeImage(null, getResidentList().get(index).getImage()));
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ResidentEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ResidentEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ResidentEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ResidentEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ResidentEntry().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Delete;
    private javax.swing.JTable JTable_Residents;
    private javax.swing.JButton chooseimage;
    private javax.swing.JButton clear;
    private javax.swing.JButton insert;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_image;
    private javax.swing.JButton next;
    private javax.swing.JButton previous;
    private javax.swing.JButton search;
    private javax.swing.JTextField text_dob;
    private javax.swing.JTextField text_fname;
    private javax.swing.JTextField text_gender;
    private javax.swing.JTextField text_language;
    private javax.swing.JTextField text_nationality;
    private javax.swing.JTextField text_religion;
    private javax.swing.JTextField text_residentid;
    private javax.swing.JTextField text_searchid;
    private javax.swing.JTextField text_sname;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
