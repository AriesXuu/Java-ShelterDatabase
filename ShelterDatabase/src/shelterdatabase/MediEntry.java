/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shelterdatabase;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class MediEntry extends javax.swing.JFrame {
    public MediEntry() {
        initComponents();
        getConnection();
        Show_Medical_In_JTable();
    }
    String ImgPath = null;
    int pos = 0; 
    public Connection getConnection()
    {
        Connection con = null;
        
        try{
            con = DriverManager.getConnection("jdbc:mysql://localhost/shelterdb","root","xuyeqii");
            //JOptionPane.showMessageDialog(null, "connected");  
            return con;
        } catch (SQLException ex) {
            Logger.getLogger(MediEntry.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "not connected");
        }
        return null;
    }
public boolean checkInputs()
    {
        if(
                textbloodtype.getText() == null
                || textweight.getText() == null
                || textheight.getText() == null
                || textallergies.getText() == null
                || textconditions.getText() == null
                || textheartrisk.getText() == null
                || textdiabetus.getText() == null
                || textmedication.getText() == null
                || textspecialreq.getText() == null
                || textdisability.getText() == null
                || texthistory.getText() == null
                || textnotes.getText() == null
                ){
            return false;
        }else{
            try{
               return true;
            }catch(Exception ex)
            {
                return false;
            }
        }
        
    }
public ArrayList<Medical> getMedicalList()
        {
            ArrayList<Medical> MedicalList = new ArrayList<Medical>();
            Connection con = getConnection();
            String query = "Select * From medicalinfo";
            
            Statement st;
            ResultSet rs;            
        try {  
            st = con.createStatement();
            rs = st.executeQuery(query);
            Medical medical;
            
            while(rs.next())
            {
                medical = new Medical(rs.getInt("ResidentID"),rs.getString("Bloodtype"),rs.getString("Weight"),rs.getString("Height"),rs.getString("Allergies"),rs.getString("Conditions"),rs.getString("Heartrisk"),rs.getString("Diabetus"),rs.getString("Medication"),rs.getString("Specialreq"),rs.getString("Disability"),rs.getString("History"),rs.getString("Notes"));
                MedicalList.add(medical);
                
            }
       
        
        } catch (SQLException ex) {
            Logger.getLogger(MediEntry.class.getName()).log(Level.SEVERE, null, ex);
        }
        return MedicalList;
       }
        

public void Show_Medical_In_JTable()
        {
            ArrayList<Medical> list = getMedicalList();
            DefaultTableModel model = (DefaultTableModel)jTable_Medical.getModel();
            
            Object[] row = new Object[13];
            for(int i = 0; i < list.size(); i++)
            {
                row[0] = list.get(i).getresidentid();
                row[1] = list.get(i).getbloodtype();
                row[2] = list.get(i).getweight();
                row[3] = list.get(i).getheight();
                row[4] = list.get(i).getallergies();
                row[5] = list.get(i).getconditions();
                row[6] = list.get(i).getheartrisk();
                row[7] = list.get(i).getdiabetus();
                row[8] = list.get(i).getmedication();
                row[9] = list.get(i).getspecialreq();
                row[10] = list.get(i).getdisability();
                row[11] = list.get(i).gethistory();
                row[12]= list.get(i).getnotes();

                
                model.addRow(row);
                
                
            }
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textresidentid = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        textbloodtype = new javax.swing.JTextField();
        textweight = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        textheight = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        textallergies = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        textconditions = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        textheartrisk = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        textdiabetus = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        textmedication = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        textspecialreq = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        textdisability = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textnotes = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        texthistory = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        insert = new javax.swing.JButton();
        update = new javax.swing.JButton();
        search = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_Medical = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        previous = new javax.swing.JButton();
        next = new javax.swing.JButton();
        clear = new javax.swing.JButton();

        jLabel1.setText("ResidentID ");

        jLabel2.setText("Bloodtype");

        jLabel3.setText("Weight");

        jLabel4.setText("Height");

        jLabel5.setText("Allergies");

        jLabel6.setText("Conditions");

        jLabel7.setText("Heartrisk");

        jLabel8.setText("Diabetus");

        jLabel9.setText("Medication");

        jLabel10.setText("Specialreq");

        jLabel11.setText("Disability");

        textnotes.setColumns(20);
        textnotes.setRows(5);
        jScrollPane1.setViewportView(textnotes);

        texthistory.setColumns(20);
        texthistory.setRows(5);
        jScrollPane2.setViewportView(texthistory);

        jLabel12.setText("History");

        jLabel13.setText("Notes");

        insert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shelterdatabase/Images/Button-Add-icon.png"))); // NOI18N
        insert.setText("Insert");
        insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertActionPerformed(evt);
            }
        });

        update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shelterdatabase/Images/Sign-Alert-icon.png"))); // NOI18N
        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        search.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shelterdatabase/Images/Ok-icon.png"))); // NOI18N
        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shelterdatabase/Images/Button-Close-icon.png"))); // NOI18N
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        jTable_Medical.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 153), 3, true));
        jTable_Medical.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ResidentID", "Bloodtype", "Weight", "Height", "Allergies", "Conditions", "Heartrisk", "Diabetus", "Medication", "Specialreq", "History", "Notes"
            }
        ));
        jTable_Medical.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_MedicalMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable_Medical);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shelterdatabase/Images/medicalbanner.jpg"))); // NOI18N

        previous.setText("Previous");
        previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousActionPerformed(evt);
            }
        });

        next.setText("Next");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shelterdatabase/Images/Actions-edit-clear-icon (1).png"))); // NOI18N
        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane3))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textresidentid, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(search))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(jLabel6)
                                            .addGap(18, 18, 18)
                                            .addComponent(textconditions))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                            .addComponent(jLabel2)
                                                            .addGap(18, 18, 18))
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(jLabel3)
                                                            .addGap(1, 1, 1)))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel4)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel5)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(textallergies)
                                                .addComponent(textheight)
                                                .addComponent(textweight)
                                                .addComponent(textbloodtype, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textheartrisk)
                                    .addComponent(textdiabetus)
                                    .addComponent(textmedication)
                                    .addComponent(textspecialreq)
                                    .addComponent(textdisability, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel12))
                                        .addGap(51, 51, 51)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel13)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(104, 104, 104)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(clear)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(next, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(update)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(insert, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(previous, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                        .addGap(0, 0, 0)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {clear, delete, insert, next, previous, update});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel2, jLabel3, jLabel4, jLabel5, jLabel6});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textresidentid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(search))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textbloodtype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textheartrisk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textweight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textdiabetus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textheight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textmedication, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textallergies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textspecialreq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textconditions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textdisability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(insert)
                            .addComponent(update)
                            .addComponent(previous))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(delete)
                            .addComponent(clear)
                            .addComponent(next))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {clear, delete, insert, next, previous, update});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel2, jLabel3, jLabel4, jLabel5, jLabel6});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {textallergies, textbloodtype, textconditions, textheight, textweight});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void insertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertActionPerformed
if(checkInputs()){
        try {
        Connection con = getConnection();
PreparedStatement ps = con.prepareStatement("INSERT INTO medicalinfo(Bloodtype, Weight, Height, Allergies, Conditions, Heartrisk, Diabetus, Medication, Specialreq, Disability, History, Notes)" + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
ps.setString(1, textbloodtype.getText());
ps.setString(2, textweight.getText());
ps.setString(3, textheight.getText());
ps.setString(4, textallergies.getText());
ps.setString(5, textconditions.getText());
ps.setString(6, textheartrisk.getText());
ps.setString(7, textdiabetus.getText());
ps.setString(8, textmedication.getText());
ps.setString(9, textspecialreq.getText());
ps.setString(10, textdisability.getText());
ps.setString(11, texthistory.getText());
ps.setString(12, textnotes.getText());

ps.executeUpdate();
Show_Medical_In_JTable();
JOptionPane.showMessageDialog(null, "Data Inserted");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }else{
        JOptionPane.showMessageDialog(null, "One or More Fields are Empty");
        
    }
    System.out.println("Bloodtype => "+textbloodtype.getText());
    System.out.println("Weight => "+textweight.getText());
    System.out.println("Height => "+textheight.getText());
    System.out.println("Allergies => "+textallergies.getText());
    System.out.println("Conditions => "+textconditions.getText());
    System.out.println("Heartrisk => "+textheartrisk.getText());
    System.out.println("Diabetus => "+textdiabetus.getText());
    System.out.println("Medication => "+textmedication.getText());
    System.out.println("Specialreq => "+textspecialreq.getText());
    System.out.println("Disability => "+textdisability.getText());
    System.out.println("History => "+texthistory.getText());
    System.out.println("Notes => "+textnotes.getText());
    }//GEN-LAST:event_insertActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
if(checkInputs() && textresidentid.getText() != null)
{
        String UpdateQuery = null;
        PreparedStatement ps = null;
        Connection con= getConnection();
    try {
        UpdateQuery = "UPDATE MEDICALINFO SET Bloodtype = ?, Weight = ?, Height = ?, Allergies = ?, Conditions = ?, Heartrisk = ?, Diabetus = ?, Medication = ?, Specialreq = ?, Disability = ?, History =?, Notes = ? WHERE ResidentID = ?" ;
        ps = con.prepareStatement(UpdateQuery);        
ps.setString(1, textbloodtype.getText());
ps.setString(2, textweight.getText());
ps.setString(3, textheight.getText());
ps.setString(4, textallergies.getText());
ps.setString(5, textconditions.getText());
ps.setString(6, textheartrisk.getText());
ps.setString(7, textdiabetus.getText());
ps.setString(8, textmedication.getText());
ps.setString(9, textspecialreq.getText());
ps.setString(10, textdisability.getText());
ps.setString(11, texthistory.getText());
ps.setString(12, textnotes.getText());
ps.setInt(13, Integer.parseInt(textresidentid.getText()));
ps.executeUpdate();
Show_Medical_In_JTable();
JOptionPane.showMessageDialog(null,"Updated"); 
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, ex.getMessage());
        Logger.getLogger(MediEntry.class.getName()).log(Level.SEVERE, null, ex);
    }
    
}else{
    JOptionPane.showMessageDialog(null, "One OR More Fields Are Empty or Wrong");
}

    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
if(textresidentid.getText() != null)
{
    try {
        Connection con = getConnection();
        PreparedStatement ps = con.prepareStatement("DELETE From medicalinfo WHERE ResidentID = ?");
         int id = Integer.parseInt(textresidentid.getText());
         ps.setInt(1, id);
         ps.executeUpdate();
         Show_Medical_In_JTable();
         JOptionPane.showMessageDialog(null,"Information Deleted");  
}   catch (SQLException ex) {
        Logger.getLogger(MediEntry.class.getName()).log(Level.SEVERE, null, ex);
    }
}else{
    JOptionPane.showMessageDialog(null, "One OR More Fields Are Empty or Wrong");
} 
    }//GEN-LAST:event_deleteActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
try{
       ResultSet rs = Db.getDate("SELECT * FROM medicalinfo WHERE ResidentID='" + textresidentid.getText() + "'");
       if(rs.first())
       {
           textbloodtype.setText(rs.getString("Bloodtype"));
           textconditions.setText(rs.getString("Conditions"));
           textdiabetus.setText(rs.getString("Diabetus"));
           textdisability.setText(rs.getString("Disability"));
           textheartrisk.setText(rs.getString("Heartrisk"));
           textheight.setText(rs.getString("Height"));
           texthistory.setText(rs.getString("History"));
           textmedication.setText(rs.getString("Medication"));
           textnotes.setText(rs.getString("Notes"));
           textresidentid.setText(rs.getString("ResidentID"));
           textspecialreq.setText(rs.getString("Specialreq"));
           textweight.setText(rs.getString("Weight"));
           textallergies.setText(rs.getString("Allergies"));
       }
  }     catch (SQLException ex) {    
            Logger.getLogger(ResidentEntry.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(ResidentEntry.class.getName()).log(Level.SEVERE, null, ex);
        } 

    }//GEN-LAST:event_searchActionPerformed

    private void previousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousActionPerformed
        pos--;
        
        if(pos < 0)
        {
            pos = 0;
        }
        
        ShowItem(pos);
    }//GEN-LAST:event_previousActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
         pos++;
       
       if(pos >= getMedicalList().size())
       {
           pos = getMedicalList().size()-1;
       }
       ShowItem(pos);  
    }//GEN-LAST:event_nextActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
 textresidentid.setText("");  
         textbloodtype.setText("");
          textweight.setText(""); 
          textheight.setText(""); 
         textallergies.setText("");
         textconditions.setText("");
         textheartrisk.setText("");
          textdiabetus.setText("");
         textmedication.setText("");
        textspecialreq.setText("");
         textdisability.setText("");     
         texthistory.setText(""); 
         textnotes.setText("");        
    }//GEN-LAST:event_clearActionPerformed

    private void jTable_MedicalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_MedicalMouseClicked
         int index = jTable_Medical.getSelectedRow();
        ShowItem(index); // TODO add your handling code here:
    }//GEN-LAST:event_jTable_MedicalMouseClicked
  
    public void ShowItem(int index)
    {
         textresidentid.setText(Integer.toString(getMedicalList().get(index).getresidentid()));  
         textbloodtype.setText(getMedicalList().get(index).getbloodtype());
          textweight.setText(getMedicalList().get(index).getweight()); 
          textheight.setText(getMedicalList().get(index).getheight());  
         textallergies.setText(getMedicalList().get(index).getallergies());
         textconditions.setText(getMedicalList().get(index).getconditions());
         textheartrisk.setText(getMedicalList().get(index).getheartrisk());
          textdiabetus.setText(getMedicalList().get(index).getdiabetus());
         textmedication.setText(getMedicalList().get(index).getmedication());
        textspecialreq.setText(getMedicalList().get(index).getspecialreq());
         textdisability.setText(getMedicalList().get(index).getdisability());      
         texthistory.setText(getMedicalList().get(index).gethistory());  
         textnotes.setText(getMedicalList().get(index).getnotes()); 
          
        
         
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MediEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MediEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MediEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MediEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MediEntry().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clear;
    private javax.swing.JButton delete;
    private javax.swing.JButton insert;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable_Medical;
    private javax.swing.JButton next;
    private javax.swing.JButton previous;
    private javax.swing.JButton search;
    private javax.swing.JTextField textallergies;
    private javax.swing.JTextField textbloodtype;
    private javax.swing.JTextField textconditions;
    private javax.swing.JTextField textdiabetus;
    private javax.swing.JTextField textdisability;
    private javax.swing.JTextField textheartrisk;
    private javax.swing.JTextField textheight;
    private javax.swing.JTextArea texthistory;
    private javax.swing.JTextField textmedication;
    private javax.swing.JTextArea textnotes;
    private javax.swing.JTextField textresidentid;
    private javax.swing.JTextField textspecialreq;
    private javax.swing.JTextField textweight;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}